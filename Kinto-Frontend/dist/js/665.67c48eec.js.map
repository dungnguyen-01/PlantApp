{"version":3,"file":"js/665.67c48eec.js","mappings":"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","sources":["webpack://@coreui/coreui-free-vue-admin-template/./src/Repositories/PlantTypeRepository.js","webpack://@coreui/coreui-free-vue-admin-template/./src/views/plantType/PlantType.vue","webpack://@coreui/coreui-free-vue-admin-template/./src/views/plantType/PlantType.vue?4340"],"sourcesContent":["import axios from 'axios'\nconst api = process.env.VUE_APP_MODE + '/plant-type/'\nimport authHeader from '../services/auth-header'\nclass PlantTypeRepository {\n  getAllPlantTypes(plantType) {\n    return axios.get(api + 'list' + plantType, { headers: authHeader() })\n  }\n  getPlantTypes(page) {\n    return axios.get(api + page, { headers: authHeader() })\n  }\n  getPlantTypeById(id) {\n    return axios.get(api + id, { headers: authHeader() })\n  }\n  createPlantType(plantType) {\n    return axios.post(api, plantType, { headers: authHeader() })\n  }\n  updatePlantType(id, plantType) {\n    return axios.put(api + id, plantType, { headers: authHeader() })\n  }\n  deletePlantTypeById(id) {\n    return axios.get(api + 'delete/' + id, { headers: authHeader() })\n  }\n}\nexport default new PlantTypeRepository()\n","<template>\n  <CRow>\n    <CCol>\n      <CCard>\n        <CCardHeader> <CIcon icon=\"cil-drop\" /> List Plant Type</CCardHeader>\n        <CCardBody>\n          <CRow>\n            <div>\n              <select v-model=\"selectSizePage\">\n                <option\n                  v-for=\"(option, index) in options\"\n                  :value=\"option.value\"\n                  :key=\"index\"\n                >\n                  {{ option.text }}\n                </option>\n              </select>\n              <span class=\"m-2\"\n                >Selected:\n                <b>{{ selectSizePage }}</b>\n              </span>\n              <CButton\n                v-on:click=\"addPlantType()\"\n                class=\"btn btn-info text-light float-end mb-2\"\n                v-show=\"role.roleName == 'Admin' || role.roleName == 'Editor'\"\n              >\n                Add Plant Type\n              </CButton>\n            </div>\n          </CRow>\n          <CRow>\n            <div class=\"table-responsive-lg\">\n              <table class=\"table\">\n                <thead class=\"table-dark\">\n                  <tr>\n                    <th>ID.</th>\n                    <th>Code</th>\n                    <th>Name</th>\n                    <th>Date create</th>\n                    <th>Date Update</th>\n                    <th>{{ totalPages }}</th>\n                    <th></th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    v-for=\"(plantType, index) in plantTypes.content\"\n                    :key=\"index\"\n                  >\n                    <td>{{ index + 1 }}</td>\n                    <td>{{ plantType.code }}</td>\n                    <td>\n                      <div class=\"cut_text_show\">\n                        <p>\n                          {{ plantType.namePlantType }}\n                        </p>\n                      </div>\n                    </td>\n                    <td>\n                      {{ this.$formatDate.formatDate(plantType.createAt) }}\n                    </td>\n                    <td>\n                      {{ this.$formatDate.formatDate(plantType.updateAt) }}\n                    </td>\n                    <td>\n                      <button\n                        class=\"btn btn-outline-info rounded-pill p-0 px-4 ml-1\"\n                        title=\"detail\"\n                        v-on:click=\"detailPlantType(plantType.id)\"\n                      >\n                        <CIcon :icon=\"icon.cilCompress\" size=\"m\" />\n                      </button>\n                    </td>\n                    <td>\n                      <button\n                        class=\"btn btn-outline-warning rounded-pill p-0 px-4 mx-2\"\n                        title=\"edit\"\n                        v-on:click=\"updatePlantType(plantType.id)\"\n                        v-show=\"\n                          role.roleName == 'Admin' || role.roleName == 'Editor'\n                        \"\n                      >\n                        <CIcon :icon=\"icon.cilPen\" size=\"m\" />\n                      </button>\n                    </td>\n                    <td>\n                      <button\n                        class=\"btn btn-outline-danger rounded-pill p-0 px-4\"\n                        title=\"delete\"\n                        @click=\"deletePlantType(plantType.id)\"\n                        v-show=\"\n                          role.roleName == 'Admin' || role.roleName == 'Editor'\n                        \"\n                      >\n                        <CIcon :icon=\"icon.cilTrash\" size=\"m\" />\n                      </button>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </CRow>\n          <CRow>\n            <CPagination\n              class=\"pagination justify-content-center\"\n              aria-label=\"Page navigation example\"\n            >\n              <CPaginationItem\n                style=\"cursor: pointer\"\n                v-show=\"pageNumber != 1\"\n                @click=\"previousPage()\"\n                >Previous\n              </CPaginationItem>\n              <CPaginationItem\n                style=\"cursor: pointer\"\n                v-for=\"(page, index) in plantTypes.totalPages\"\n                :key=\"index\"\n                @click=\"setPage(page)\"\n                :class=\"page == pageNumber ? 'active' : ''\"\n              >\n                {{ page }}\n              </CPaginationItem>\n              <CPaginationItem\n                style=\"cursor: pointer\"\n                v-show=\"pageNumber != plantTypes.totalPages\"\n                v-bind:hidden=\"plantTypes.totalPages == 0\"\n                @click=\"nextPage()\"\n                >Next</CPaginationItem\n              >\n            </CPagination>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </CCol>\n  </CRow>\n  <Loading v-model:active=\"isLoading\" />\n</template>\n\n<script>\nimport PlantTypeRepository from '@/Repositories/PlantTypeRepository'\nimport * as icon from '@coreui/icons'\nexport default {\n  name: 'PlantType',\n  data() {\n    return {\n      plantTypes: [],\n      pageNumber: 1,\n      role: this.$store.state.auth.user.user.role,\n      orgId: this.$store.state.auth.user.user.organization.id,\n      responseSuccess: true,\n      isLoading: true,\n      selectSizePage: 15,\n      options: [\n        { text: '15', value: '15' },\n        { text: '25', value: '25' },\n        { text: '50', value: '50' },\n        { text: '100', value: '100' },\n      ],\n    }\n  },\n  methods: {\n    fetchPlantTypes() {\n      PlantTypeRepository.getPlantTypes(\n        `?size=${this.selectSizePage}&page=${this.pageNumber - 1}&orgId=${\n          this.orgId\n        }`,\n      )\n        .then((response) => {\n          setTimeout(() => {\n            this.isLoading = false\n          }, 1000)\n          if (response.status === 200) {\n            this.plantTypes = response.data\n          }\n        })\n        .catch(() => {\n          this.isLoading = false\n          this.$swal.fire(\n            'Warning!',\n            'The system is experiencing an error, please reload the page',\n            'warning',\n          )\n        })\n    },\n    detailPlantType(id) {\n      this.$router.push(`/plant_type/detail-plant_type/${id}`)\n    },\n    addPlantType() {\n      this.$router.push('/plant_type/form-plant_type/null')\n    },\n    updatePlantType(id) {\n      this.$router.push(`/plant_type/form-plant_type/${id}`)\n    },\n    deletePlantType(id) {\n      this.$swal({\n        title: 'Are you sure?',\n        text: \"You won't be able to revert this!\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, delete it!',\n        cancelButtonText: 'No, cancel!',\n        confirmButtonColor: '#55c663',\n        reverseButtons: true,\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.isLoading = true\n          PlantTypeRepository.deletePlantTypeById(id)\n            .then((response) => {\n              if (response.status === 200) {\n                this.isLoading = false\n                this.fetchPlantTypes()\n                this.$swal.fire(\n                  'Deleted!',\n                  'You have successfully deleted.',\n                  'success',\n                )\n              }\n            })\n            .catch(() => {\n              this.isLoading = false\n              this.$swal.fire(\n                'Warning!',\n                'The system is experiencing an error, please reload the page',\n                'warning',\n              )\n            })\n        }\n      })\n    },\n    setPage(page) {\n      this.pageNumber = page\n    },\n    nextPage() {\n      this.pageNumber = this.pageNumber + 1\n    },\n    previousPage() {\n      this.pageNumber = this.pageNumber - 1\n    },\n  },\n  created() {\n    this.fetchPlantTypes()\n  },\n  setup() {\n    return {\n      icon,\n    }\n  },\n  watch: {\n    selectSizePage(newQuestion, oldQuestion) {\n      if (oldQuestion != newQuestion) {\n        this.fetchPlantTypes()\n      }\n    },\n    pageNumber(newQuestion, oldQuestion) {\n      if (oldQuestion != newQuestion) {\n        this.fetchPlantTypes()\n      }\n    },\n  },\n}\n</script>\n","import { render } from \"./PlantType.vue?vue&type=template&id=1612eec7\"\nimport script from \"./PlantType.vue?vue&type=script&lang=js\"\nexport * from \"./PlantType.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/mnt/d/ProjectJava/Kinto-Frontend/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["api","process","PlantTypeRepository","getAllPlantTypes","plantType","axios","headers","authHeader","getPlantTypes","page","getPlantTypeById","id","createPlantType","updatePlantType","deletePlantTypeById","class","_createElementVNode","_createVNode","_component_CRow","_component_CCol","_component_CCard","_component_CCardHeader","_component_CIcon","icon","_component_CCardBody","$data","$event","_createElementBlock","_Fragment","_renderList","option","index","value","key","text","_hoisted_2","_toDisplayString","_component_CButton","onClick","$options","roleName","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_ctx","_hoisted_14","_hoisted_15","content","code","namePlantType","$formatDate","formatDate","createAt","updateAt","title","$setup","cilCompress","size","cilPen","cilTrash","_component_CPagination","_component_CPaginationItem","style","totalPages","_createBlock","hidden","_component_Loading","active","name","data","plantTypes","pageNumber","role","this","$store","state","auth","user","orgId","organization","responseSuccess","isLoading","selectSizePage","options","methods","fetchPlantTypes","then","response","setTimeout","status","catch","$swal","fire","detailPlantType","$router","push","addPlantType","deletePlantType","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","reverseButtons","result","isConfirmed","setPage","nextPage","previousPage","created","setup","watch","newQuestion","oldQuestion","__exports__","render"],"sourceRoot":""}